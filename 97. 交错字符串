class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        len1=len(s1)
        len2=len(s2)
        len3=len(s3)
        if(len1+len2!=len3):
            return False
        dp=[[False]*(len2+1) for i in range(len1+1)]
        dp[0][0]=True
        for i in range(1,len1+1):
            dp[i][0]=(dp[i-1][0] and s1[i-1]==s3[i-1])
        for i in range(1,len2+1):
            dp[0][i]=(dp[0][i-1] and s2[i-1]==s3[i-1])
        for i in range(1,len1+1):
            for j in range(1,len2+1):
                dp[i][j]=(dp[i][j-1] and s2[j-1]==s3[i+j-1]) or (dp[i-1][j] and s1[i-1]==s3[i+j-1])
        return dp[-1][-1]

# 别刷暴力 穷举了 看看动态吧
#初始化s1,s2,s3s1,s2,s3的长度分别为len1,len2,len3len1,len2,len3
#若len1+len2!=len3len1+len2!=len3，表示一定不能构成交错字符串，返回FalseFalse
#初始化dpdp为(len1+1)*(len2+1)(len1+1)∗(len2+1)的FalseFalse数组。
#初始化第一列dp[i][0]dp[i][0]，遍历第一列，遍历区间[1,len1+1)[1,len1+1)：
#dp[i][0]=dp[i-1][0] and s1[i-1]==s3[i-1]dp[i][0]=dp[i−1][0]ands1[i−1]==s3[i−1]。表示s1s1的前ii位是否能构成s3s3的前ii位。因此需要满足的条件为，前i-1i−1位可以构成s3s3的前i-1i−1位且s1s1的第ii位（s1[i-1]s1[i−1]）等于s3s3的第ii位（s3[i-1]s3[i−1]）
#初始化第一行dp[0][j]dp[0][j]，遍历第一行，遍历区间[1,len2+1)[1,len2+1)：
#dp[0][i]=dp[0][i-1] and s2[i-1]==s3[i-1]dp[0][i]=dp[0][i−1]ands2[i−1]==s3[i−1]。表示s2s2的前ii位是否能构成s3s3的前ii位。因此需要满足的条件为，前i-1i−1位可以构成s3s3的前i-1i−1位且s2s2的第ii位（s2[i-1]s2[i−1]）等于s3s3的第ii位（s3[i-1]s3[i−1]）
# 遍历dpdp数组，每一行ii，遍历区间[1,len1+1)[1,len1+1)：
# 每一列jj，遍历区间[1,len2+1)[1,len2+1)：
# dp[i][j]=(dp[i][j-1]\ and\ s2[j-1]==s3[i+j-1])\ or\ (dp[i-1][j]\ and\ s1[i-1]==s3[i+j-1])$$ 。解释：$s1$前$i$位和$s2$的前$j$位能否组成$s3$的前$i+j$位取决于两种情况：

# s1s1的前ii个字符和s2s2的前j-1j−1个字符能否构成s3s3的前i+j-1i+j−1位，且s2s2的第jj位（s2[j-1]s2[j−1]）是否等于s3s3的第i+ji+j位（s3[i+j-1]s3[i+j−1]）。
#返回dp[-1][-1]dp[−1][−1]

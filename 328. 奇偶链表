# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def oddEvenList(self, head: ListNode) -> ListNode:
        if not head or head.next==None:
            return head
        flag_node=head
        current=head.next
        while current and current.next:
            a=current.next
            current.next=current.next.next
            a.next=flag_node.next
            flag_node.next=a
            flag_node=a
            current=current.next
        return head

JAVA
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
        if(head==null)return head;
        ListNode current=head.next;
        ListNode right=head;
        int i=0;
        while(current!=null&&current.next!=null){
                ListNode a=current.next;
                current.next=current.next.next;
                a.next=right.next;
                right.next=a;
                right=right.next;
                current=current.next;
        }
        return head;
    }
} 


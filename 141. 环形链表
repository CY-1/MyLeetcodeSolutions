# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        def my(tree):
            if tree==None:
                return False
            else:
                if tree.val==None:
                    return True
                else:
                    tree.val=None
                    return my(tree.next)
        return my(head)
# 遍历的过程中修改val值表示来过 即可

// java写法

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode a=head;
        
        if(head==null||head.next==null){
            return false;
        }
        ListNode b=head.next;
        while (a!=null&&b!=null){
            if(a==b){
                return true;
            }
            a=a.next;
            b=b.next!=null ? b.next.next:b.next;
        }
        return false;
    }
}

class Solution:
    def findWords(self, board, words):
        self.result=[]
        weight = len(board)

        if weight==0:
            return []
        length = len(board[0])
        def my(x,y,total,old,lost):
            if ""==old:
                self.result.append(total)
                return True
            else:
                if board[x][y]==old[0]:
                    total=total+board[x][y]
                    old=old[1:]
                    lost[(x, y)] = False
                    if "" == old:
                        self.result.append(total)
                        return True
                    for i in [(1,0),(0,1),(0,-1),(-1,0)]:
                        if lost.get((x+i[0],y+i[1]), True):
                            if 0 <= x + i[0] and x + i[0] < weight and 0 <= y + i[1] and y + i[1] < length and \
                                    board[x + i[0]][y + i[1]] == old[0]:


                                my(x + i[0], y + i[1], total, old,lost.copy())
                else:
                    return False
        for i in words:
            for x in range(weight):
                for y in range(length):
                    if my(x,y,"",i,{}):
                        break
        return list(set(self.result))
# 自己写的搜索超时了  贴一个字典树
class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        WORD_KEY = '$'
        
        trie = {}
        for word in words:
            node = trie
            for letter in word:
                # retrieve the next node; If not found, create a empty node.
                node = node.setdefault(letter, {})
            # mark the existence of a word in trie node
            node[WORD_KEY] = word
        
        rowNum = len(board)
        colNum = len(board[0])
        
        matchedWords = []
        
        def backtracking(row, col, parent):    
            
            letter = board[row][col]
            currNode = parent[letter]
            
            # check if we find a match of word
            word_match = currNode.pop(WORD_KEY, False)
            if word_match:
                # also we removed the matched word to avoid duplicates,
                #   as well as avoiding using set() for results.
                matchedWords.append(word_match)
            
            # Before the EXPLORATION, mark the cell as visited 
            board[row][col] = '#'
            
            # Explore the neighbors in 4 directions, i.e. up, right, down, left
            for (rowOffset, colOffset) in [(-1, 0), (0, 1), (1, 0), (0, -1)]:
                newRow, newCol = row + rowOffset, col + colOffset     
                if newRow < 0 or newRow >= rowNum or newCol < 0 or newCol >= colNum:
                    continue
                if not board[newRow][newCol] in currNode:
                    continue
                backtracking(newRow, newCol, currNode)
        
            # End of EXPLORATION, we restore the cell
            board[row][col] = letter
        
            # Optimization: incrementally remove the matched leaf node in Trie.
            if not currNode:
                parent.pop(letter)

        for row in range(rowNum):
            for col in range(colNum):
                # starting from each of the cells
                if board[row][col] in trie:
                    backtracking(row, col, trie)
        
        return matchedWords    

作者：LeetCode
链接：https://leetcode-cn.com/problems/word-search-ii/solution/dan-ci-sou-suo-ii-by-leetcode/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
        

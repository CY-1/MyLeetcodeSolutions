class Solution:
    def search(self, nums: List[int], target: int) -> bool:
        start = 0
        nums_length=len(nums)
        end = nums_length-1
        while start<=end:
            mid = int((end+start)/2)
            if nums[mid]==target:
                return True
            if nums[start]==nums[mid]:
                start+=1
                continue
            if nums[start]<nums[mid]:
                if nums[start]<=target and nums[mid]>target:
                    end=mid-1
                else:
                    start=mid+1
            else:
                if nums[mid]<target and nums[end]>=target:
                    start=mid+1
                else:
                    end=mid-1
        return False
 #本题是需要使用二分查找，怎么分是关键，举个例子：

# 第一类
# 1011110111 和 1110111101 这种。此种情况下 nums[start] == nums[mid]，分不清到底是前面有序还是后面有序，此时 start++ 即可。相当于去掉一个重复的干扰项。
# 第二类
# 22 33 44 55 66 77 11 这种，也就是 nums[start] < nums[mid]。此例子中就是 2 < 5；
# 这种情况下，前半部分有序。因此如果 nums[start] <=target<nums[mid]，则在前半部分找，否则去后半部分找。
# 第三类
# 66 77 11 22 33 44 55 这种，也就是 nums[start] > nums[mid]。此例子中就是 6 > 2；
# 这种情况下，后半部分有序。因此如果 nums[mid] <target<=nums[end]。则在后半部分找，否则去前半部分找。

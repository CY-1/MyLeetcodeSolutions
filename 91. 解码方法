class Solution:
    count = 0

    def numDecodings(self, s: str) -> int:
        if s[0]=="0":
            return 0
        def my(total):
            total_length = len(total)
            if total_length == 0:
                self.count+=1
                return
            if total_length == 1:
                self.count += 1
                return
            if int(total[:2])<27 and int(total[:2])>=10:
                my(total[2:])
            my(total[1:])

        my(s)
        return self.count
# 垃圾递归超时
# 下面是动态规划
class Solution:
    def numDecodings(self, s: str) -> int:
        n = len(s)
        if n==0: return 0
        dp = [1,0]
        dp[1] = 1 if s[0]!='0' else 0 
        for i in range(1,n):
            dp.append(0)
            if s[i]!='0':
                dp[i+1] += dp[i]
            if s[i-1:i+1]>='10' and s[i-1:i+1]<='26':
                dp[i+1] += dp[i-1]
        
        return dp[-1]
#上面是s[:i+1]可能的解码方法的来源，可以看到它相当于一个加了条件约束的走楼梯问题，因此动态转移公式可以写成：

#dp[i+1] = 0. if s[i] == '0' and (s[i-1:i+1] < '10' or s[i-1:i+1]>'26')
#dp[i+1] = dp[i]. if s[i]!= '0' and (s[i-1:i+1] < '10' or s[i-1:i+1]>'26')
#dp[i+1] = dp[i-1]. if s[i] == '0' and (s[i-1:i+1] >= '10' and s[i-1:i+1]<='26')
#dp[i+1] = dp[i]+dp[i-1]. if s[i] != '0' and (s[i-1:i+1] >= '10' and s[i-1:i+1]<='26')


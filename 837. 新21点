class Solution:
    def new21Game(self, N: int, K: int, W: int) -> float:
        if K == 0:
            return 1.0
        dp = [0.0] * (K + W)
        for i in range(K, min(N, K + W - 1) + 1):
            dp[i] = 1.0
        dp[K-1]=float(min(N - K + 1, W)) / W
        for i in range(K-2,-1,-1):
            dp[i] = dp[i+1]-(dp[i+ W+1]-dp[i+1])/W
        return dp[0]
#老实说，一开始没懂题目意思，后面才知道是求爱丽丝的胜率。
# 规则是这样：

# 她可以从牌面为[1,W]的牌中选择任意一张，这张牌是可以无限重复的，也就是说无论她取多少次，每次取到2（假如2在[1,W]范围内）的概率都是1/W;
#如果她手上牌的总额小于K，她就会抽牌，大于等于K时，就停止抽牌;
# 停止抽牌后，她的牌面小于等于N时，她就获胜了，求她获胜的概率。
#假设dp[x]为她手上牌面为x时，能获胜的概率，那么这个概率应该是：
#dp[x]=1/w * (dp[x+1]+dp[x+2]+dp[x+3]...+dp[x+w])
#因为抽取的牌面机会都是均等的，她能抽取的面值在[1,W]之间，所以将概率之和平均一下就是dp[x]的概率。
#x最多能到K-1，因为当大于等于K时，爱丽丝会停止抽牌，所以当游戏结束时，即爱丽丝停止抽牌时，她可能达到的最大牌面是K+W-1，而一开始她的牌面是0，所以我们用一个长度为K+W的dp数组来保存她在所有面值下的胜率。
#最后dp[0]，也就是最开始爱丽丝还没有抽牌，她的牌面为0时的胜率，这个就是我们的答案

 
